; program for string operations
;=================================================================================================;

%macro write_string 2
    mov	ebx, 1	    ;file descriptor (stdout)
	mov	eax, 4	    ;system call number (sys_write);tell linker entry 
	mov	ecx, %1    ;message to write
	mov	edx, %2    ;message length
	int	0x80        ;call kernel
%endmacro

%macro accept 2
    mov ebx,0
    mov eax,3
	mov ecx,%1
	mov edx,%2
	int	0x80        ;call kernel
%endmacro

;===================================================================================================;

section	.text
	global _start       	;must be declared for using gcc
_start:                     	;tell linker entry point
	write_string msg,len
	accept ip_str,6
	mov byte[cnt],al
	write_string ip_str, 6
	
	
	write_string newline, newl_len
	write_string menu, menu_len
	accept choice,1
	write_string choice,1
	
	cmp byte[choice],31h
	je upper
	cmp byte[choice], 32h
	je lower
	cmp byte[choice], 33h
	je tog
	cmp byte[choice], 34h
	je conc
	jmp myend
	
upper:
    	mov esi, ip_str
    	mov edi, str2
    	mov cl,[cnt]
nextcu:
    	mov ch,[esi]
    	cmp ch,'a'
    	jb next1
    	cmp ch,'z'
    	ja next1
    	sub ch,20h
    
next1:
    	mov [edi],ch
    	inc esi
    	inc edi
    	dec cl
    	jnz nextcu
    
    	write_string newline, newl_len
    	write_string msg1,len1
    	write_string str2,6
    	jmp myend

lower:
    	mov esi, ip_str
    	mov edi, str2
    	mov cl,[cnt]
nextcl:
    	mov ch,[esi]
    	cmp ch,'A'
    	jb next2
    	cmp ch,'Z'
    	ja next2
    	add ch,20h
    
next2:
    	mov [edi],ch
    	inc esi
    	inc edi
    	dec cl
    	jnz nextcl
    
    	write_string newline, newl_len
    	write_string msg2,len2
    	write_string str2,6
    	jmp myend

tog:
    	mov esi,ip_str
    	mov edi, str2
again:
    	mov al,[esi]
    	cmp al,'A'
    	jb copy
    	cmp al,'Z'
    	ja toggle3
    	add al,20h
    	jmp copy
    
toggle3:
    	cmp al,'a'
    	jb copy
    	cmp al,'z'
    	ja copy
    	sub al,20h
    
copy:
    	mov [edi], al
    	inc esi
    	inc edi
    	dec cl
    	jnz again
    
    	write_string newline, newl_len
    	write_string msg3,len3
    	write_string str2,6
    	jmp myend
    
conc:
    	write_string newline, newl_len
    	write_string msg4,len4
   	accept str2,6
    	dec al
    	mov byte[cnt1],al
    	mov dl, byte[cnt1]
    	mov cl, byte[cnt]
    	write_string str2,6
    
    	mov esi, ip_str
    	mov edi, str3
    
again2:
    	mov al,[esi]
    	mov [edi],al
    	inc esi
    	inc edi
    	dec cl
    	jnz again2
    
    	mov esi,str2
again3:
    	mov al, [esi]
    	mov [edi],al
    	inc esi
    	inc edi
    	dec dl
    	jnz again3
    
    	write_string newline, newl_len
    	write_string msg5,len5
    	write_string str3,12
    
    
myend:           	    ; end program
	mov	eax, 1	    ;system call number (sys_exit)
	mov ebx,0
	int	0x80        ;call kernel

;==============================================================================================;
section	.data

msg	db	'Given string is '
len	equ	$ - msg		
menu 	db 	'Choose: ',0ah,'1) Uppercase',0ah,'2) Lowercase ', 0ah, '3) Toggle',0ah,'4) Concatenate', 0ah
menu_len 	equ $ -menu
msg1 	db 	'The uppercase string is: '
len1 		equ $ -msg1
msg2 	db 	'The lowercase string is: '
len2 		equ $ -msg2
msg3 	db 	'Toggled output: '
len3 		equ $ -msg3
msg4 	db 	'Enter another string to concatenate: '
len4 		equ $ -msg4
msg5 	db 	'Concatenated string:  '
len5 		equ $ -msg5
newline db 	" ", 0xa
newl_len    	equ $ - newline

;=================================================================================================;
section .bss
ip_str: resb 6
str2: resb 6
str3: resb 12
cnt: resb 1                  ; stores len of input string
cnt1: resb 1
choice: resb 1

;===================================================================================================;